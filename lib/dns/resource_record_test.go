package dns

import (
	"testing"

	"git.sr.ht/~shulhan/pakakeh.go/lib/test"
)

func TestUnpackDomainName(t *testing.T) {
	type testCase struct {
		expDomainName string
		expError      string
		packet        []byte
		start         uint
		expEnd        uint
	}

	var packet = []byte{
		0x00, 0x00, 0x84, 0x00, 0x00, 0x01, 0x00, 0x01, // 0x00
		0x00, 0x00, 0x00, 0x00, 0x07, 0x6B, 0x69, 0x6C, // 0x08
		0x61, 0x62, 0x69, 0x74, 0x04, 0x69, 0x6E, 0x66, // 0x10
		0x6F, 0x00, 0x00, 0x06, 0x00, 0x01, 0xC0, 0x0C, // 0x18
		0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x0E, 0x10, // 0x20
		0x00, 0x1E, 0xC0, 0x0C, 0x05, 0x61, 0x64, 0x6D, // 0x28
		0x69, 0x6E, 0xC0, 0x0C, 0x01, 0x33, 0xEF, 0x60, // 0x30
		0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x3C, // 0x38
		0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x0E, 0x10, // 0x40
	}

	var cases = []testCase{{
		packet:        packet,
		start:         0x0C,
		expDomainName: `kilabit.info`,
		expEnd:        0x1A,
	}, {
		packet:        packet,
		start:         0x1E,
		expDomainName: `kilabit.info`,
		expEnd:        0x20,
	}, {
		packet:        packet,
		start:         0x2A,
		expDomainName: `kilabit.info`,
		expEnd:        0x2C,
	}, {
		packet:        packet,
		start:         0x2C,
		expDomainName: `admin.kilabit.info`,
		expEnd:        0x34,
	}}

	var (
		c             testCase
		gotDomainName string
		gotEnd        uint
		err           error
	)
	for _, c = range cases {
		gotDomainName, gotEnd, err = unpackDomainName(c.packet, c.start)
		if err != nil {
			test.Assert(t, `unpackDomainName`, c.expError, err.Error())
			continue
		}

		test.Assert(t, `domainName`, c.expDomainName, gotDomainName)
		test.Assert(t, `end`, c.expEnd, gotEnd)
	}
}
